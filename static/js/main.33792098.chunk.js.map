{"version":3,"sources":["components/ContactList/ContactList.module.css","components/styles/Input.module.css","redux/phonebook-actions.js","redux/phonebook-operations.js","redux/phonebook-selector.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","redux/phonebook-reducer.js","redux/store.js","reportWebVitals.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","name","number","dispatch","newContact","post","then","data","catch","error","id","delete","a","get","getContacts","state","phonebook","contacts","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","useDispatch","handleChange","e","currentTarget","value","checkContact","some","contact","alert","phonebookOperations","reset","onSubmit","preventDefault","className","s","Form","Label","type","onChange","Input","ContactList","List","map","Item","Text","onClick","onDeleteContact","Filter","event","App","useEffect","length","createReducer","_","action","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","phonebookReducer","devTools","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33792098.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"ContactList_List__206Xm\",\"Item\":\"ContactList_Item__2zI_R\",\"Text\":\"ContactList_Text__1jiiw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Input_Form__reIqy\",\"Label\":\"Input_Label__2TvnQ\",\"Input\":\"Input_Input__-42W0\"};","import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'phonebook/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'phonebook/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('phonebook/fetchContactsError');\n\nexport const addContactRequest = createAction('phonebook/addContactRequest');\nexport const addContactSuccess = createAction('phonebook/addContactSuccess');\nexport const addContactError = createAction('phonebook/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'phonebook/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'phonebook/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('phonebook/deleteContactError');\n\n// export const deleteContact = createAction('phonebook/DeleteContact');\nexport const changeFilter = createAction('phonebook/ChangeFilter');\n","import axios from 'axios';\nimport {\n  addContactSuccess,\n  addContactRequest,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './phonebook-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n\n  // axios\n  //   .get('/contacts')\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n  //   .catch(error => dispatch(fetchContactsError(error)));\n};\n\nconst addContact = ({ name, number }) => dispatch => {\n  const newContact = {\n    // id: shortid.generate(),\n    name,\n    number,\n  };\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', newContact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\nexport default { addContact, deleteContact, fetchContacts };\n","export const getContacts = state => state.phonebook.contacts;\nexport const getFilter = state => state.phonebook.filter;\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport phonebookOperations from '../../redux/phonebook-operations';\nimport { getContacts } from '../../redux/phonebook-selector';\nimport s from '../styles/Input.module.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    if (e.currentTarget.name === 'name') {\n      setName(e.currentTarget.value);\n    } else if (e.currentTarget.name === 'number') {\n      setNumber(e.currentTarget.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    checkContact(name, number);\n    reset();\n  };\n\n  const checkContact = (name, number) => {\n    const isNameInContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (isNameInContact) {\n      alert(`${name} is already in contact`);\n    } else if (name !== '' || number !== '') {\n      const newContact = {\n        name,\n        number,\n      };\n      dispatch(phonebookOperations.addContact(newContact));\n    }\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form onSubmit={handleSubmit} className={s.Form}>\n      <label className={s.Label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          className={s.Input}\n        />\n      </label>\n      <label className={s.Label}>\n        Number\n        <input\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          className={s.Input}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport phonebookOperations from '../../redux/phonebook-operations';\nimport { getVisibleContacts } from '../../redux/phonebook-selector';\nimport s from './ContactList.module.css';\n\nfunction ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(phonebookOperations.deleteContact(id));\n\n  return (\n    <ul className={s.List}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.Item}>\n          <p className={s.Text}>\n            {name}: {number}\n          </p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              onDeleteContact(id);\n            }}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactList;\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.number.isRequired,\n//     }),\n//   ).isRequired,\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/phonebook-actions';\nimport { getFilter } from '../../redux/phonebook-selector';\nimport s from '../styles/Input.module.css';\n\nfunction Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = event => dispatch(changeFilter(event.currentTarget.value));\n  return (\n    <label className={s.Label}>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        className={s.Input}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ContactForm from './ContactForm';\nimport ContactList from './ContactList';\nimport Filter from './Filter';\nimport { getContacts } from '../redux/phonebook-selector';\nimport phonebookOperations from '../redux/phonebook-operations';\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(phonebookOperations.fetchContacts());\n  }, []);\n  const contacts = useSelector(getContacts);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {contacts.length > 0 ? <Filter /> : <p>Your phonebook is empty</p>}\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './phonebook-actions';\nimport initialContacts from '../initialContacts.json';\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, action) => action.payload,\n});\nconst contacts = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => {\n    return [...state, payload];\n  },\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport phonebookReducer from './phonebook-reducer';\nimport logger from 'redux-logger';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    phonebook: phonebookReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default { store };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport store from './redux/store';\nimport reportWebVitals from './reportWebVitals';\nconsole.log('store', store);\nconsole.log('store.store', store.store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}